/**
 * parser.ypp - .fgd parser.
 * Copyright (C) 2022 Trevor Last
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */


%require "3.2"  /* Don't want position.hh and stack.hh */
%language "c++" /* Generate C++ parser */
%header         /* Generate tokens header */
%locations      /* Enable location tracking */

%define api.namespace {FGD}
%define api.parser.class {FGDParser}
%define api.prefix {fgd}
%define api.value.type variant
%define parse.assert            /* Enable parser runtime asserts */
%define parse.error detailed    /* Detailed error messages */
%define parse.trace             /* Enable parser tracing */

/* Pass scanner and driver into yylex. */
%parse-param {FGDScanner &scanner}
%parse-param {FGDDriver &driver}

%code requires {
    namespace FGD
    {
        class FGDDriver;
        class FGDScanner;
    }

    #include "fgd/fgd.hpp"
}

%code top {
#include <string>
#include <optional>

#include "FGDDriver.hpp"

#undef fgdlex
#define fgdlex scanner.next_token
}


/* Property types. */
%token INTEGER_T "integer"
%token STRING_T "string"
%token CHOICE_T "choices"
%token FLAG_T "flags"
%token TARGET_SOURCE_T "target_source"
%token TARGET_DESTINATION_T "target_destination"
%token COLOR255_T "color255"
%token STUDIO_T "studio"    /* Shared by attribute and property */
%token SPRITE_T "sprite"    /* Shared by attribute and property */
%token SOUND_T "sound"

/* Attribute names. */
%token SIZE_ATTR "size"
%token COLOR_ATTR "color"
%token BASE_ATTR "base"
%token ICONSPRITE_ATTR "iconsprite"
/* %token SPRITE_ATTR "sprite" */
%token DECAL_ATTR "decal"
%token BASECLASS "BaseClass"
%token SOLIDCLASS "SolidClass"
%token POINTCLASS "PointClass"

%token <int> NUMBER
%token <std::string> STRING
%token <std::string> L_NAME
%token <std::string> TYPENAME


%nterm <std::vector<std::shared_ptr<Class>>> classdefinitions
%nterm <std::shared_ptr<Class>> classdefinition

%nterm <decltype(Class::attributes)> attributes
%nterm <std::shared_ptr<Attribute>> attribute sizeattr colorattr baseattr iconspriteattr spriteattr decalattr studioattr
%nterm <std::vector<std::string>> baseattrargs

%nterm <decltype(Class::properties)> properties
%nterm <std::shared_ptr<Property>> property integerprop stringprop choiceprop flagprop targetsourceprop targetdestprop color255prop studioprop spriteprop soundprop decalprop
%nterm <std::optional<int>> intdefault
%nterm <std::optional<std::string>> stringdefault stringdefault_loose

%nterm <std::map<int, std::string>> choicedefinitionlist
%nterm <std::map<int, std::string>> choicedefinition

%nterm <decltype(FlagProperty::flags)> flagdefinitionlist
%nterm <std::pair<int, FlagProperty::Flag>> flagdefinition

%nterm <std::string> reserved NAME

%nterm <std::string> description
%nterm <std::optional<std::string>> optional_description
%nterm <std::optional<int>> optional_number


%%
fgd: classdefinitions { driver.result.classes = $1; };

classdefinitions:
    %empty                              { $$ = {}; }
|   classdefinitions classdefinition    { $$ = $1; $$.push_back($2); }
;

classdefinition:
    '@' BASECLASS attributes '=' NAME optional_description '[' properties ']'
    { $$ = std::make_shared<BaseClass>($3, $5, $6, $8); }
|   '@' SOLIDCLASS attributes '=' NAME optional_description '[' properties ']'
    { $$ = std::make_shared<SolidClass>($3, $5, $6, $8); }
|   '@' POINTCLASS attributes '=' NAME optional_description '[' properties ']'
    { $$ = std::make_shared<PointClass>($3, $5, $6, $8); }
;


attributes:
    %empty                  { $$ = {}; }
|   attributes attribute    { $$ = $1; $$.push_back($2); }
;
attribute:
    sizeattr
|   colorattr
|   baseattr
|   iconspriteattr
|   spriteattr
|   decalattr
|   studioattr
;
sizeattr:
    "size" '(' NUMBER NUMBER NUMBER ')'
    { $$ = std::make_shared<SizeAttribute>($3, $4, $5); }
|   "size" '(' NUMBER NUMBER NUMBER ',' NUMBER NUMBER NUMBER ')'
    { $$ = std::make_shared<SizeAttribute>($3, $4, $5, $7, $8, $9); }
;
colorattr:
    "color" '(' NUMBER NUMBER NUMBER ')'
    { $$ = std::make_shared<ColorAttribute>($3, $4, $5); }
;
baseattr:
    "base" '(' baseattrargs ')'
    { $$ = std::make_shared<BaseAttribute>($3); }
;
iconspriteattr:
    "iconsprite" '(' STRING ')'
    { $$ = std::make_shared<IconSpriteAttribute>($3); }
;
spriteattr:
    "sprite" '(' ')'
    { $$ = std::make_shared<SpriteAttribute>(); }
;
decalattr:
    "decal" '(' ')'
    { $$ = std::make_shared<DecalAttribute>(); }
;
studioattr:
    "studio" '(' STRING ')'
    { $$ = std::make_shared<StudioAttribute>($3); }
;

baseattrargs:
    NAME                    { $$ = {$1}; }
|   baseattrargs ',' NAME   { $$ = $1; $$.push_back($3); }
;


properties:
    %empty              { $$ = {}; }
|   properties property { $$ = $1; $$.push_back($2); }
;

property:
    integerprop
|   stringprop
|   choiceprop
|   flagprop
|   targetsourceprop
|   targetdestprop
|   color255prop
|   studioprop
|   spriteprop
|   soundprop
|   decalprop
;
integerprop:
    NAME '(' "integer" ')' ':' description intdefault
    { $$ = std::make_shared<IntegerProperty>($1, $6, $7); }
;
stringprop:
    NAME '(' "string" ')' ':' description stringdefault_loose
    { $$ = std::make_shared<StringProperty>($1, $6, $7); }
;
choiceprop:
    NAME '(' "choices" ')' ':' description optional_number '=' '[' choicedefinitionlist ']'
    { $$ = std::make_shared<ChoiceProperty>($1, $6, $7, $10); }
|   NAME '(' "choices" ')' optional_number '=' '[' choicedefinitionlist ']'
    { $$ = std::make_shared<ChoiceProperty>($1, "", $5, $8); }
;
flagprop:
    NAME '(' "flags" ')' '=' '[' flagdefinitionlist ']'
    { $$ = std::make_shared<FlagProperty>($1, $7); }
;
targetsourceprop:
    NAME '(' "target_source" ')' ':' description
    { $$ = std::make_shared<TargetSourceProperty>($1, $6); }
;
targetdestprop:
    NAME '(' "target_destination" ')' ':' description
    { $$ = std::make_shared<TargetDestinationProperty>($1, $6); }
;
color255prop:
    NAME '(' "color255" ')' ':' description ':' STRING
    { $$ = std::make_shared<Color255Property>($1, $6, $8); }
;
studioprop:
    NAME '(' "studio" ')' ':' description stringdefault
    { $$ = std::make_shared<StudioProperty>($1, $6, $7); }
;
spriteprop:
    NAME '(' "sprite" ')' ':' description stringdefault
    { $$ = std::make_shared<SpriteProperty>($1, $6, $7); }
;
soundprop:
    NAME '(' "sound" ')' ':' description stringdefault
    { $$ = std::make_shared<SoundProperty>($1, $6, $7); }
;
decalprop: /* does this actually accept a description? */
    NAME '(' "decal" ')' optional_description
    { $$ = std::make_shared<DecalProperty>($1, $5); }
;

intdefault:
    %empty      { $$.reset(); }
|   ':' NUMBER  { $$ = $2; }
;
stringdefault:
    %empty      { $$.reset(); }
|   ':' STRING  { $$ = $2; }
;
stringdefault_loose:
    %empty      { $$.reset(); }
|   ':' STRING  { $$ = $2; }
    /* DoD's .fgd uses ints as default values for strings */
|   ':' NUMBER  { $$ = std::to_string($2); }
;

choicedefinitionlist:
    choicedefinition
|   choicedefinitionlist choicedefinition   { $$ = $1; $$.merge($2); }
;
choicedefinition: NUMBER ':' description { $$ = {{$1, $3}}; };

flagdefinitionlist:
    flagdefinition                      { $$.insert($1); }
|   flagdefinitionlist flagdefinition   { $$ = $1; $$.insert($2); }
;
flagdefinition:
    NUMBER ':' description ':' NUMBER
    { $$ = std::make_pair($1, FlagProperty::Flag{$3, $5}); }
;


/* TEMP: Workaround. Proper way to do this is to make attribute names and
 * property types context-dependent. */
reserved:
"integer" { $$ = "integer"; }
| "string" { $$ = "string"; }
| "choices" { $$ = "choices"; }
| "flags" { $$ = "flags"; }
| "target_source" { $$ = "target_source"; }
| "target_destination" { $$ = "target_destination"; }
| "color255" { $$ = "color255"; }
| "studio" { $$ = "studio"; }
| "sprite" { $$ = "sprite"; }
| "sound" { $$ = "sound"; }
| "size" { $$ = "size"; }
| "color" { $$ = "color"; }
| "base" { $$ = "base"; }
| "iconsprite" { $$ = "iconsprite"; }
| "decal" { $$ = "decal"; }
;
NAME: L_NAME | reserved;

description: STRING;
optional_description:
    %empty          { $$.reset(); }
|   ':' description { $$ = $2; }
;
optional_number:
    %empty      { $$.reset(); }
|   ':' NUMBER  { $$ = $2; }
;


%%
void FGD::FGDParser::error(location_type const &l, std::string const &err_message)
{
    std::cerr << "Error: " << err_message << " at " << l << '\n';
}
