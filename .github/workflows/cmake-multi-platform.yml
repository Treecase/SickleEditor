# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Targeting Linux and Windows with gcc (through MSYS2 for Windows).
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            setup: setup-msys2
            shell: msys2 {0}
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            setup: setup-ubuntu
            shell: bash

    steps:
    - name: Install Dependencies (MSYS2)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          bison
          cmake
          flex
          git
        pacboy: >-
          glew:p
          gtkmm3:p
          lua:p

    - name: Install Dependencies (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
          sudo apt-get update
          sudo apt-get install bison flex libfl-dev libglew-dev libgtkmm-3.0-dev liblua5.4-dev


    # Disable autocrlf for MSYS2 compatibility.
    - run: git config --global core.autocrlf input
    - uses: actions/checkout@v4

    # MSYS2 needs to convert paths to Unix style, so instead of using github.workspace directly we create an intermediate var which is modified on Windows.
    - run: echo "workspace=${{ github.workspace }}" >> "$GITHUB_OUTPUT"
    - name: Set workspace string (MSYS2)
      if: ${{ matrix.os == 'windows-latest' }}
      run: echo "workspace=$(cygpath -u ${{ github.workspace }})" >> "$GITHUB_OUTPUT"

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      run: |
        echo "build-output-dir=${{ steps.strings.outputs.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Initialize and update submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ steps.strings.outputs.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
